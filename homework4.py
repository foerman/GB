#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

def zp():
  h, st, pr = map(int, argv[1:])
  print("Зарплата: ", h * st + pr)

zp()

#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
#Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
res = [my_list[i] for i in range(1, len(my_list)) if my_list[i] > my_list[i - 1]]
print(res)

#3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
#Подсказка: используйте функцию range() и генератор.

my_list2 = range(20, 241)
res2 = [i for i in my_list2 if i % 20 == 0 or i % 21 == 0]
print(res2)

#4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
#Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#Результат: [23, 1, 3, 10, 4, 11]

my_list3 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
res3 = [i for i in my_list3 if my_list3.count(i) == 1]
print(res3)

#5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().

from functools import reduce

my_list4 = [i for i in range(100, 1001, 2)]

def umn(a, b):
  res = a * b
  return res

res4 = reduce(umn, my_list4)
print(res4)

#6. Реализовать два небольших скрипта:
#итератор, генерирующий целые числа, начиная с указанного;
#итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import count, cycle

def my_iter():
  num_start = int(input('Введите начальное число: '))
  num_end = int(input('Введите конечное число: '))

  for num in count(num_start):
    print(num)
    if num == num_end:
      return

my_iter()

def my_iterc():
  start_list = input('Введите список чисел через пробел: ').split()
  num_r = int(input('Введите количество повторений: '))
  ind = 0
  for n in cycle(start_list):
    print(start_list)
    ind = ind + 1
    if ind == num_r:
      return

my_iterc()

